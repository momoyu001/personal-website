import{_ as l,c as s,o as a,d as i}from"./app.759d40dd.js";const C=JSON.parse('{"title":"面试笔记（四）","description":"","frontmatter":{},"headers":[{"level":2,"title":"契约锁","slug":"契约锁","link":"#契约锁","children":[]},{"level":2,"title":"OOCL","slug":"oocl","link":"#oocl","children":[]},{"level":2,"title":"晟合坤","slug":"晟合坤","link":"#晟合坤","children":[]},{"level":2,"title":"丙晟","slug":"丙晟","link":"#丙晟","children":[]}],"relativePath":"interview/company/company4.md"}'),e={name:"interview/company/company4.md"},p=i(`<h1 id="面试笔记-四" tabindex="-1">面试笔记（四） <a class="header-anchor" href="#面试笔记-四" aria-hidden="true">#</a></h1><h2 id="契约锁" tabindex="-1">契约锁 <a class="header-anchor" href="#契约锁" aria-hidden="true">#</a></h2><ul><li><p>JS的包装类型</p><ul><li>基本类型可以通过<code>.</code>操作去调用一些基本方法，比如<code>100.toFixed()</code>，基本类型本来是没有原型链的，可以使用这些方法，是因为JS做了一层包装，包装类型的作用</li><li>**红宝书：**为了方便操作原始值，ES提供了3种特殊的类型引用：Boolean、Number、String。每当用到原始值的方法或者属性时，后台都会创建一个相应的原始包装类型的对象，从而暴露出操作原始值的各种方法。</li></ul></li><li><p>JS中的迭代器：</p><ul><li>迭代是指，可以从一个数据集中按照一定顺序，不断的取出数据的过程。 <ul><li>迭代强调依次取数据的过程，不保证把所有的数据都取完</li><li>遍历强调的是要把所有的数据依次全部取出</li></ul></li><li>JavaScript中，迭代器是能调用<strong>next方法</strong>实现迭代的一个<strong>对象</strong>，该方法返回一个具有两个属性的对象 <ul><li>value：可迭代对象的下一个值</li><li>done：表示是否已经取出所有的数据，false表示还有数据，true表示后面没数据了</li></ul></li></ul></li><li><p>for...in、for...of的区别</p><ul><li>for...in：遍历可枚举的</li><li>for...of：遍历可迭代的</li></ul></li><li><p>实现一个深拷贝的方式：</p><ul><li>lodash.deepClone</li><li>JSON.stringfy、JSON.parse</li><li>自己实现深拷贝的方式</li></ul></li><li><p>取到对象的所有的属性：</p><ul><li>Object.getOwnPropertyNames(obj) - 获取属性名</li><li>Object.getOwnPropertyDescriptors(obj) - 获取某个对象的属性描述符</li><li>Object.getOwnPropertyDescriptor(obj, key) - 获取对象的某个属性的描述符</li></ul></li><li><p>Reflect和Proxy：</p><ul><li>在proxy里面使用Reflect。不用Reflect也可以实现，可以直接去操作源对象。<strong>因为this指向的原因，配合Reflect一起使用</strong></li><li>proxy配合Refeclt，是因为Proxy会提供第三个参数，<code>receiver</code>，使用Reflect，将这个参数传递给Reflect，保证this指向的正常。</li></ul></li><li><p>vue2中哪些情况下会导致数据不是响应式的</p><ul><li>对象中新增的一个属性</li><li>访问下标的方式去修改数组的某个元素</li></ul></li><li><p>v-model双向数据绑定的原理</p><ul><li>是input标签的value属性和input事件的语法糖</li></ul></li><li><p>vue的单文件组件里面，正在style里面加上<code>scoped</code>会发生什么</p><ul><li>对于所有的vue组件，只要设置了<code>&lt;style scoped&gt;&lt;/style&gt;</code>，Vue就会给该组件生成一个唯一的<code>data值</code></li><li>Vue会将这个<code>data值</code>作为一个属性添加到组件内所有HTML的dom节点</li><li>如果这个组件内部有包含子组件：有两种情况 <ul><li>子组件没有设置scoped：则只会给子组件的最外层标签加上当前的组件data值</li><li>子组件有设置scoped：则子组件也会自动生成自己的data值，然后子组件最外层标签在自己的data值后面添加上父组件的data值</li></ul></li><li>对于组件内写在<code>&lt;style scoped&gt;&lt;/style&gt;</code>里面的样式，Vue均会自动在每句css选择器的末尾添加一个当前组件的data属性选择器来私有化样式</li></ul></li><li><p>在使用了scoped的情况下，如何去修改子组件的样式</p><ul><li>样式穿透： <ul><li><strong>::v-deep</strong>：Vue自己提供的，兼容性最好，有自己的loader去处理</li><li><strong>/deep/</strong>：less、node-sass中可以使用</li><li><strong>&gt;&gt;&gt;</strong>：less中不能使用（scss中可以使用），是原生CSS中的写法</li></ul></li></ul></li><li><p>vue中的$nextTick的作用和使用场景</p><ul><li>作用：延迟执行一段代码，会在下一次DOM更新完成之后执行回调。 <ul><li>vue中实现响应式并不是数据发生变化之后DOM立即就变化，而是按照一定的策略进行DOM更新。nextTick是在下次DOM更新完成之后执行延迟回调，在修改数据之后使用nextTick，则可以在回调中获取更新之后的DOM</li></ul></li><li>使用场景： <ul><li>在created中操作的dom的代码，需要放到nextTick里面</li><li>更新数据之后，想立即使用js操作新的视图，就需要将js代码放到nextTick回调里面</li></ul></li><li>原理： <ul><li>vue是异步执行dom更新的，一旦观察到数据变化，Vue就会 开启一个队列，然后把同一个事件循环当中观察到数据变化的watcher推送到这个队列中。如果这个watcher被触发多次，只会被推送进队列一次。这种缓存行为可以有效去掉重复数据造成的不必要的计算和DOM操作。</li><li>而在下一次事件循环时，Vue会清空队列，并进行必要的DOM更新</li></ul></li></ul></li><li><p>v-if和v-show的区别、使用场景</p></li><li><p>v-for添加key的作用是什么，可以使用什么作为key</p></li><li><p>key可以用一个函数（一个返回唯一id的函数）吗</p><ul><li>1、循环多少次，就调用多少次方法</li><li>2、每次更新都是返回了不同的key值，那就是在diff里面，所有的元素节点都要去做更新，就没有可以复用的</li></ul></li><li><p>路由懒加载：import动态导入</p></li><li><p>import的时候，会传一个注释：<code>/webpackChunkName: xxx/</code>，是用来干什么的</p><ul><li>加这个注释，webpack会把同名（xxx）的打到一个chunk里面</li><li>一般会针对一个页面使用一个完全不同的chunkName</li></ul></li><li><p>vue中数据传递（通信方式）</p></li><li><p>基于已有的组件进行封装的时候，原组件可能有很多的props、emits、slots，这种怎么处理（怎么处理属性、时间、插槽的透传？）</p><ul><li>vue中<code>$attr</code>、<code>$listener</code>、<code>$slots</code>实现 <ul><li>$slots拿到所有的插槽</li></ul></li></ul></li><li><p>怎么把一些没有定义的属性，透传到$attrs里面</p><ul><li><p>inheritedAttrs = true：属性会展示到dom元素上</p></li><li><p>inheritedAttrs = false：把属性全部放到$attrs里面</p></li><li><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">myCom</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">inheritAttrs</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 设置为true，属性会展示在dom元素上。设置为false，则属性只会在$attrs上，不会出现在dom上</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div></li><li></li></ul></li><li><p>vue-class-component + 装饰器的写法可以了解一下</p></li></ul><h2 id="oocl" tabindex="-1">OOCL <a class="header-anchor" href="#oocl" aria-hidden="true">#</a></h2><ul><li><p>table合并相同数据单元格的处理</p><ul><li><p>colspan用来在td/th标签中指定单元格横向跨越的列数</p></li><li><p>rowspan用来在td/th标签中指定单元格纵向跨越的列数</p></li><li><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 先循环列，再循环行，对第一行和第二行的内容进行比较，如果内容相同，就隐藏第二行，并将计数器+1。继续比较第二行与第三行，依次类推，本列循环完毕，就给本列第一行添加rowspan=sum</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div></li></ul></li><li><p>SPA和MPA的区别</p><ul><li>SPA：所需的资源如：html、css、js等，在一次请求中就加载完成，即不需要刷新的动态的加载。页面渲染、逻辑处理、页面路由、接口请求均是在浏览器中发生。避免了由于在服务器上呈现页面而导致的中断 <ul><li>优点：页面切换快（切换页面不需要做html请求），用户体验好</li><li>缺点：首屏慢（请求html，请求js）、SEO优化差（因为搜索引擎只认识html里面的内容，不认识js的内容，而单页应用的内容都是靠js渲染生成出来的，搜索引擎无法识别，也就不会有一个好的排名）</li></ul></li><li>MPA：有多个独立页面的应用（多个html）。每个页面必须重复加载js、css等资源。页面跳转是返回html的 <ul><li>优点：首屏渲染快（请求html，只有一次请求），SEO友好</li><li>缺点：页面切换慢，用户体验差</li></ul></li></ul></li><li><p>this.$ref是响应式的吗</p><ul><li>this.$refs是一个对象，持有当前组件中注册过ref特性的所有DOM元素和子组件实例</li><li>$refs只有在组件渲染完成之后才会填充，在初始渲染的时候不能访问它们，并且它们是非响应式的，因此不能用它在模板中做数据绑定</li></ul></li><li><p>在computed中使用了this.$refs获取子组件数据，子组件数据变化，可以响应式的改变computed吗</p><ul><li>不会</li></ul></li></ul><h2 id="晟合坤" tabindex="-1">晟合坤 <a class="header-anchor" href="#晟合坤" aria-hidden="true">#</a></h2><ul><li><p>移动端适配的方案用的什么？</p><ul><li>rem</li></ul></li><li><p>rem和em的区别</p></li><li><p>移动H5开发中，有没有遇到安卓苹果的兼容性问题</p><ul><li><p>日期格式的问题：苹果系统下不支持<code>yyyy-MM-dd</code>，<code>yyyy.MM.dd</code>的日期格式</p><ul><li><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 这样获取的时间，在安卓上是正常的，在苹果上是显示了NaN</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> newDate </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Date</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">2018-02-10</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div></li><li><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 这样获取的时间，在安卓和苹果上都是显示正常的</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> newDate </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Date</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">2018/02/10</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div></li></ul></li></ul></li><li><p>谷歌浏览器的开发者工具的使用</p></li><li><p>开发中针对一个请求，想要修改这个请求的参数，快速的重新发送，如何处理</p><ul><li>在请求路径上，右键，打开console标签页，粘贴后回车，再回到network里面就可以看到刚才在console里面发送的请求了。所以我们可以在console里面修改参数</li><li>mock插件也可以实现请求中参数的修改，然后重新发起请求</li></ul></li><li><p>交换两个变量的值，不通过第三个变量</p><ul><li><p>数组的解构赋值方式：<code>[a, b] = [b, a]</code></p></li><li><p>位运算的方式：</p><ul><li><p>0和任何数亦或都等于这个数，本身和本身亦或等于0</p></li><li><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 亦或运算，相同为0，不同为1</span></span>
<span class="line"><span style="color:#A6ACCD;">a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> a</span><span style="color:#89DDFF;">^</span><span style="color:#A6ACCD;">b</span></span>
<span class="line"><span style="color:#A6ACCD;">b </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> a</span><span style="color:#89DDFF;">^</span><span style="color:#A6ACCD;">b   </span><span style="color:#676E95;font-style:italic;">// b = a^b^b = a</span></span>
<span class="line"><span style="color:#A6ACCD;">a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> a</span><span style="color:#89DDFF;">^</span><span style="color:#A6ACCD;">b</span></span>
<span class="line"></span></code></pre></div></li></ul></li><li><p>如果是数字，可以使用加减运算来交换</p><ul><li><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> b </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">20</span></span>
<span class="line"><span style="color:#A6ACCD;">a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> b</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">b </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> b</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> b</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div></li></ul></li></ul></li><li><p>null == 0，null &gt;= 0这两个逻辑表达式的值分别是什么：<code>false</code>，<code>true</code></p><ul><li>null == 0：null在设计上，对比等于的时候不会转换类型，不转换类型的话是不会相等的</li><li>null &gt;= 0：对比大小时，null会尝试转换数据类型，转换之后null为0，0 &gt;= 0时true</li><li>关系运算符和相等运算符并不是一个类别的。关系运算符在设计上总是可能需要转换数据类型，相等运算符没这方面的设计</li></ul></li><li><p>箭头函数和普通函数的不同</p></li><li><p>vue组件的created里面，用原生JS的方式把模板清空（找到这个dom把它清空掉），那么这个清空操作会一直生效吗？<strong>不会</strong></p><ul><li>确实可以把模板清空掉，但是到了mounted这个生命周期时，会把之前清空掉模板重新挂载一份新的，清空操作就无效了</li><li>即：会生效，只是时效性长短的问题</li></ul></li><li><p>vue组件的data是一个方法</p></li><li><p>什么是闭包？</p><ul><li>创建并返回一个函数的时候，通过这个函数可以访问到定义函数时所在作用域的变量</li></ul></li><li><p>js数据精度的问题，如何保证数据做了运算之后，精度不变</p></li><li><p>精确到小数点后6位的两个小数进行相加，如何做，如何保证精度</p><ul><li>自定义一个函数，将其转为整数进行处理，处理完成之后再转化为小数</li><li>借助<code>Math.pow(10, len)</code>将小数转换处理</li></ul></li><li><p>两个image标签：并排形式，上下行形式，在展示的时候会有什么区别吗</p><ul><li>默认状态下：上下行形式的，两个标签之间会有一个空格。（修改img标签的display的值，可以解决，如：<code>display: block</code>）</li><li></li><li>img是类似于text的元素，在结束的时候，会在末尾加上一个空白符，所以就会多出3px</li><li>解决方法：<code>float: left</code></li></ul></li><li><p>浏览器的缓存：</p><ul><li>强缓存：</li><li>协商缓存：</li></ul></li></ul><h2 id="丙晟" tabindex="-1">丙晟 <a class="header-anchor" href="#丙晟" aria-hidden="true">#</a></h2><ul><li><p>数组去重的方法</p></li><li><p>ES6的Symbol</p></li><li><p>定时器有用过吗</p><ul><li>在防抖、节流中有使用过</li></ul></li><li><p>nextTick有用过吗</p><ul><li>js里面的process.nextTick</li><li>vue里面的nextTick：下次DOM更新完成之后的回调</li></ul></li><li><p>promise.all[promise1, promise2, promise3, ....]和async/await promise1 promise2, promise3区别：</p><ul><li>执行顺序的区别： <ul><li>promise.all内部是并行执行的</li><li>async/await是按照函数调用顺序执行的</li></ul></li><li>在传参数量大（执行量较大的情况下）promise.all的执行顺序会快一点。常规情况下差不多</li></ul></li><li><p>闭包</p></li><li><p>宏任务和微任务</p></li><li><p>webpack中的loader用来做什么</p></li><li><p>ES6和commonJS的模块化</p></li><li><p>commonJS中怎么引入ES6写的模块</p></li><li><p>栈和队列的区别</p></li><li><p>快速排序是什么排的</p></li><li><p>有没有用过一些安全、加密方面的东西，比如接口、敏感数据。md5、堆成加密、非对称加密</p></li><li><p>图片，base64有 了解吗，用来干什么的，怎么生成的</p></li><li><p>例如：9.9 浮点数在内存中怎么表示的</p></li><li><p>浮点数精度问题，问题产生的原因是什么</p></li><li><p>跨域，解决方法</p></li><li><p>微信小程序中的openID，uniID是什么</p></li><li><p>linux系统有玩过吗</p></li></ul>`,9),n=[p];function o(t,c,r,u,d,y){return a(),s("div",null,n)}const A=l(e,[["render",o]]);export{C as __pageData,A as default};
