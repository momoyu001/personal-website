import{_ as s,c as a,o as n,d as l}from"./app.7ff22c70.js";const d=JSON.parse('{"title":"搭建静态资源服务","description":"","frontmatter":{},"headers":[{"level":2,"title":"框架选型","slug":"框架选型","link":"#框架选型","children":[]},{"level":2,"title":"前端项目的配置","slug":"前端项目的配置","link":"#前端项目的配置","children":[]},{"level":2,"title":"启动项目","slug":"启动项目","link":"#启动项目","children":[]},{"level":2,"title":"前端界面功能","slug":"前端界面功能","link":"#前端界面功能","children":[]},{"level":2,"title":"服务端功能","slug":"服务端功能","link":"#服务端功能","children":[]},{"level":2,"title":"具体实现","slug":"具体实现","link":"#具体实现","children":[{"level":3,"title":"数据库","slug":"数据库","link":"#数据库","children":[]},{"level":3,"title":"配置跨域，中间件","slug":"配置跨域-中间件","link":"#配置跨域-中间件","children":[]}]}],"relativePath":"other/搭建静态资源服务.md"}'),p={name:"other/搭建静态资源服务.md"},o=l(`<h1 id="搭建静态资源服务" tabindex="-1">搭建静态资源服务 <a class="header-anchor" href="#搭建静态资源服务" aria-hidden="true">#</a></h1><p>平时写学习笔记的时候，会需要贴图，一般自己会截图存在项目里面，但是有时候这些笔记可能会发布到掘金等类似网站，贴图的路径还是项目中的路径，图片就先显示不出来，因此想搭建一个自己的静态资源服务器，专门用于存储这些截图，这样不论自己在哪里使用这些图片，图片路径都可以不变。</p><p>本文记录一下搭建这个静态资源服务的过程。</p><h2 id="框架选型" tabindex="-1">框架选型 <a class="header-anchor" href="#框架选型" aria-hidden="true">#</a></h2><p>该项目使用<code>nest</code>框架搭建，数据库使用<code>mongodb</code>，项目中的前端页面部分使用<code>vue3</code>框架。</p><p>服务端项目</p><div class="language-yaml"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C3E88D;">npm i -g @nestjs/cli</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C3E88D;">nest new static-hub</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C3E88D;">cd static-hub</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C3E88D;">pnpm i</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C3E88D;">pnpm run start</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><p>前端项目：</p><div class="language-yaml"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># 根目录下执行</span></span>
<span class="line"><span style="color:#C3E88D;">npm init vue@latest</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 根据交互界面选择配置</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C3E88D;">cd client</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C3E88D;">pnpm i</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C3E88D;">pnpm run dev</span></span>
<span class="line"></span></code></pre></div><p>前端项目中，因为使用了 ts ,需要在 <code>env.d.ts</code> 文件中增加以下代码来声明 <code>.vue</code> 文件的类型，否则在引入 .vue 文件时，会提示找不到类型声明。</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">declare</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">module</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">*.vue</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">type</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">DefineComponent</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">vue</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">vueComponent</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">DefineComponent</span><span style="color:#89DDFF;">&lt;{},</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{},</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">any</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">vueComponent</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h2 id="前端项目的配置" tabindex="-1">前端项目的配置 <a class="header-anchor" href="#前端项目的配置" aria-hidden="true">#</a></h2><p>在 nest 项目中配置，我们需要安装一下 <code>@nestjs/serve-static</code> 插件，然后在 <code>app.modules</code> 文件中做如下的配置：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Module</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">@nestjs/common</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">AppController</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./app.controller</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">AppService</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./app.service</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">ServeStaticModule</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">@nestjs/serve-static</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">join</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">path</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">Module</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">imports</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span></span>
<span class="line"><span style="color:#A6ACCD;">    ServeStaticModule</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">forRoot</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">rootPath</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">join</span><span style="color:#A6ACCD;">(__dirname</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">..</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">client/dist</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  ]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">controllers</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [AppController]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">providers</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [AppService]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">AppModule</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"></span></code></pre></div><h2 id="启动项目" tabindex="-1">启动项目 <a class="header-anchor" href="#启动项目" aria-hidden="true">#</a></h2><p>分别启动服务端项目和前端项目。</p><p>启动服务端项目，监听了 3000 端口，启动之后，在浏览器输入 <code>http://localhost:300</code>，会看到界面展示 <code>hello world</code>。</p><p>启动前端项目，展示 vue 项目默认的界面。</p><h2 id="前端界面功能" tabindex="-1">前端界面功能 <a class="header-anchor" href="#前端界面功能" aria-hidden="true">#</a></h2><ul><li>上传图片功能，图片上传成功之后，需要返回该图片的使用路径</li><li>展示图库中的图片，展示信息包括 <ul><li>图片名称</li><li>上传日期</li><li>备注</li></ul></li><li>删除图片的功能</li><li>查询图片的功能</li></ul><h2 id="服务端功能" tabindex="-1">服务端功能 <a class="header-anchor" href="#服务端功能" aria-hidden="true">#</a></h2><ul><li>需提供出接口实现以上前端功能</li><li>将图片数据保存到数据库中</li><li>数据库中需要能够自动更新图片使用时间</li></ul><h2 id="具体实现" tabindex="-1">具体实现 <a class="header-anchor" href="#具体实现" aria-hidden="true">#</a></h2><h3 id="数据库" tabindex="-1">数据库 <a class="header-anchor" href="#数据库" aria-hidden="true">#</a></h3><p>根据初步的功能设想，设计表结构</p><ul><li>id 主键</li><li>name 图片名称</li><li>url 图片地址</li><li>图片地址</li></ul><p>安装数据库<code>mongoose</code>，用于连接 mongodb 数据库和操作数据库：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">pnpm add mongoose</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h3 id="配置跨域-中间件" tabindex="-1">配置跨域，中间件 <a class="header-anchor" href="#配置跨域-中间件" aria-hidden="true">#</a></h3><p>body-parser</p><p>body-parser 是一个 Node.js 中间件，用于处理 HTTP 请求中的请求体数据。它可以解析来自表单 POST、JSON 数据、文本数据等格式的数据，并将其转换为 JavaScript 对象。如果没有使用 body-parser，则必须手动解析请求体中的数据，这通常是非常繁琐和冗长的。</p><p>使用 body-parser，我们可以更轻松地处理 HTTP 请求的请求体，并且可以将请求体数据直接作为 JSON 对象或字符串在程序中使用。在 Nest.js 中，body-parser 通常与 @nestjs/common 中的 @Body() 装饰器一起使用，以处理传入的请求体数据。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">pnpm add body-parser</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div>`,33),e=[o];function t(c,r,i,y,D,F){return n(),a("div",null,e)}const A=s(p,[["render",t]]);export{d as __pageData,A as default};
