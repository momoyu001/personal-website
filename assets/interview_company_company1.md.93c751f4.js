import{_ as s}from"./chunks/image-20220727215507647.a1fa4455.js";import{_ as l,c as n,o as a,d as p}from"./app.ce57af01.js";const u=JSON.parse('{"title":"面试笔记（一）","description":"","frontmatter":{},"headers":[{"level":2,"title":"字节跳动","slug":"字节跳动","link":"#字节跳动","children":[]},{"level":2,"title":"汤臣倍健","slug":"汤臣倍健","link":"#汤臣倍健","children":[]},{"level":2,"title":"树维信息","slug":"树维信息","link":"#树维信息","children":[]},{"level":2,"title":"东方财富","slug":"东方财富","link":"#东方财富","children":[]},{"level":2,"title":"见知数据","slug":"见知数据","link":"#见知数据","children":[]}],"relativePath":"interview/company/company1.md"}'),o={name:"interview/company/company1.md"},e=p(`<h1 id="面试笔记-一" tabindex="-1">面试笔记（一） <a class="header-anchor" href="#面试笔记-一" aria-hidden="true">#</a></h1><h2 id="字节跳动" tabindex="-1">字节跳动 <a class="header-anchor" href="#字节跳动" aria-hidden="true">#</a></h2><ul><li><p>自我介绍</p></li><li><p>介绍项目</p></li><li><p>浏览器输入一个URL到页面渲染发生了什么，详细说说</p></li><li><p>页面中的JS需要提前加载，不阻塞页面渲染，怎么做</p></li><li><p>浏览器缓存机制。强缓存、协商缓存的标识。</p><ul><li>强缓存：Expires、Cache-control。缓存数据库中有数据，且没有过期，就直接从缓存数据库中取，不请求服务器，有数据但是缓存失效，就请求服务器，服务器返回数据和缓存规则，将数据和缓存规则存入缓存数据库中</li><li>协商缓存：Etag/If-None-Match；If-Modify-Since/Last-Modified。从缓存数据库中获取缓存规则，请求服务器验证是否失效，没有失效则返回304，直接从缓存中读取数据，失效的话就会返回新的数据和缓存规则， 并存入缓存数据库中。</li><li>network中的size这个选项，可以看到来源信息</li></ul></li><li><p>CSS盒模型由几种。怎么去设置盒模型</p></li><li><p>如何实现一个元素的水平垂直方向上的居中</p></li><li><p>对象和数组，如何区分哪个是对象哪个是数组</p></li><li><p>改变this指向的方法</p></li><li><p>v-for循环展示列表，要加上key。可以用index当作key吗</p><ul><li>需要增、删的场景不可以使用key</li></ul></li><li><p>vue的diff中，key的作用是什么</p><ul><li>在vue中，判断节点是否可复用，都是以key值作为判断的前提条件，如果不使用key值，就会默认更新所有节点。</li><li>key是Vue中虚拟dom的唯一标记，通过这个key，我们的diff操作可以更加的准确和快速 <ul><li>更准确：用了key之后，就不是简单的就地复用。key会作为比较前后两个节点是不是一个节点的依据</li><li>利用key的唯一性生成map对象来获取对应节点，比遍历的方式更快</li></ul></li></ul></li><li><p>vue的响应式是怎么实现的</p><ul><li><strong>observer对象</strong>：用来对象数据对象进行遍历，使用了Object.defineProperty这个API，给对象的属性都加上getter和setter的拦截</li><li><strong>compiler解析器</strong>：用来编译模板、解析vue里面的指令，会将模板里面的变量都替换成数据，然后渲染页面，并且会给每一个指令对应的节点绑定一个更新函数，并添加监听数据的订阅者，一旦数据发生变化，就会收到通知调用更新函数进行数据更新</li><li><strong>Dep订阅器</strong>：采用发布订阅模式，用来收集Watcher，对Observer和Watcher进行统一管理</li><li><strong>Watcher订阅者</strong>：是Observer和Compiler之间通信的桥梁，主要的任务是订阅observer中属性值变化的消息，当收到属性值变化的消息，触发compiler解析器中对应的更新函数</li></ul></li><li><p>vue-router两种模式的区别</p></li><li><p>history模式，需要服务端怎么配合</p><ul><li><p>之所以刷新页面白屏，其实是因为路由找不到对应的资源，就会404，为了避免这种情况的发生，可以让所有的路由都指向index.html</p></li><li><p><strong>前端方面的配置</strong>：</p><ul><li><p>首先要设置路由的mode和base两个值</p><ul><li><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> routes </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> []</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> router </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">VueRouter</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">mode</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">history</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">base</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> process</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">env</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">BASE_URL</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    routes</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div></li></ul></li><li><p>其次要设置vue.config.js里面的publicPath</p><ul><li><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">module.exports</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    publicPath默认值是 &#39;/&#39;，即你的应用是被部署在一个域名的跟路径上，</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    设置为 ./  可以避免打包后的静态页面空白</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    当在非本地环境时，这里以项目test-daily为例，即打包后的后h5项目部署在服务器的test-daily目录下，那么这里就要把publicPath设置为  /test-daily/，表示所有的静态资源都在 /test-daily/里</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    打包部署后，会发现index.html引用的静态资源都添加了路径 /test-daily/</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    **/</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#A6ACCD;">  	</span><span style="color:#F07178;">publicPath</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> process</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">env</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">NODE_ENV </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">development</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">?</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">/test-daily/</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div></li></ul></li></ul></li></ul></li><li><p>页面性能，performance会关注吗</p></li><li><p>看输出</p></li><li><p>算法题</p></li></ul><h2 id="汤臣倍健" tabindex="-1">汤臣倍健 <a class="header-anchor" href="#汤臣倍健" aria-hidden="true">#</a></h2><ul><li><p>自我介绍</p></li><li><p>介绍项目</p></li><li><p>一个新的项目，如何进行技术选型、技术调研</p></li><li><p>CSS选择器</p><ul><li>基础选择器 <ul><li>id</li><li>class</li><li>标签</li><li>通配符</li></ul></li><li>属性选择器</li><li>伪类选择器</li><li>伪元素选择器</li><li>组合选择器</li></ul></li><li><p>CSS选择器的优先级</p><ul><li>id &gt; class 、属性、伪类&gt; 标签、伪元素 &gt; 通配符</li></ul></li><li><p>基本数据类型和引用数据类型的区别</p></li><li><p>get和post的区别，本质上由区别吗</p><ul><li>本质上没有区别。</li></ul></li><li><p>vuex有哪些属性</p></li><li><p>如何实现一个水平垂直方向上的居中</p></li><li><p>rem是什么</p><ul><li>rem的值是px的倍数</li></ul></li><li><p>vue中的diff是怎么做的</p></li><li><p>vue的diff是深度优先还是广度优先</p><ul><li>深度优先</li></ul></li><li><p>vue-router的两种路由模式有什么区别</p></li><li><p>箭头函数和普通函数区别</p></li><li><p>call、apply、bind的区别</p></li><li><p>浏览器发送一个http请求的过程中发生了什么</p></li><li><p>简单说一下原型链</p><ul><li>当访问一个对象的属性时，如果这个对象本身不存在这个属性，就会去它的构造函数的<code>prototype</code>属性中寻找上查找，依次类推</li><li>对象都有一个<code>__proto__</code>属性</li><li>函数都有一个<code>prototype</code>属性</li></ul></li><li><p>cookie、sessionStorage、localStorage有什么区别</p></li><li><p>http-only属性是做什么的</p></li><li><p>闭包</p></li><li><p>浏览器的同源策略。解决跨域的方法有哪些</p></li><li><p>如何实现深拷贝</p></li><li><p>HTTPS和HTTP有什么区别</p><ul><li>HTTPS：以安全为目标，是具有安全性的SSL加密传输协议，端口是443</li><li>HTTP：超文本传输协议，信息是明文传输，端口是80</li></ul></li><li><p>多端自适应-媒体查询：CSS3的 @media</p><ul><li><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">@media</span><span style="color:#A6ACCD;"> mediaType and|not|only </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">media feature</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;">/* CSS-Code */</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div></li><li><p>mediaType：</p><ul><li>all：所有屏幕</li><li>screen：电脑屏幕，平板电脑，智能手机</li><li>print：打印机，打印预览</li><li>speech：屏幕阅读器等发声设备</li></ul></li><li><p>media feature：媒体功能</p><ul><li>min-width：页面最大宽度</li><li>max-width：页面最小宽度</li></ul></li><li><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight"><code><span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">@media</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">max-width</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1280px</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">body</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#B2CCD6;">background</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> pink</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">@media</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">min-width</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1281px</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">and</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">max-width</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1366px</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">body</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#B2CCD6;">background</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> red</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div></li></ul></li></ul><h2 id="树维信息" tabindex="-1">树维信息 <a class="header-anchor" href="#树维信息" aria-hidden="true">#</a></h2><ul><li><p>forEach和map的区别</p><ul><li>map：会创建一个新的数组，其结果是在调用数组中的每个元素上调用提供的函数。不改变原数组。</li><li>forEach：针对每个元素执行提供的函数。不会返回新数组，不会改变原数组（当数组中的元素是值类型，不会改变数组，当 数组中的元素是引用类型，可以改变数组）</li></ul></li><li><p>Vue中虚拟DOM解析的过程</p><ul><li>虚拟DOM： <ul><li>用对象属性来描述节点，实际上它是一层对真实DOM封装。定义了真实DOM的一些关键性的信息，将原本需要在真实DOM上进行的创建节点、添加节点等一系列复杂的DOM操作，全部放到虚拟DOM中执行。将vnode更新的地方用diff算法来更新只修改了的地方，可以避开很多无谓的修改。</li></ul></li><li>render函数之后，生成了vnode。</li></ul></li><li><p>Vue中key的作用:</p><ul><li>key会作为diff算法中，比较两个节点是否为同一个节点依据之一。</li><li>key重复、复用，会造成dom复用的错误</li></ul></li><li><p>一维数组转树形结构</p><ul><li><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 递归方式</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> arrayToTree </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">nums</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">pId</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 找到有相同父元素的元素（找子元素）</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">flag</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">nums</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">filter</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;font-style:italic;">item</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">item</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">pId</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">pId</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">||</span><span style="color:#F07178;"> []</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">flag</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">?</span><span style="color:#F07178;"> []</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">flag</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">map</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;font-style:italic;">item</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">              </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">obj</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> id</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">item</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">id</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> pId</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">pId</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> children</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">arrayToTree</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">nums</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">item</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">id</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#F07178;">              </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">obj</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">children</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">?</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> id</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">item</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">id</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> pId</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">pId</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">obj</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">          </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> arr </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> [</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">id</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">pId</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null,</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">1</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">children</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> []</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">id</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">pId</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">2</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">children</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> []</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">id</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">pId</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">4</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">3</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">children</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> []</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">id</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">4</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">pId</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">4</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">children</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> []</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">id</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">5</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">pId</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">8</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">5</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">children</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> []</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#82AAFF;">arrayToTree</span><span style="color:#A6ACCD;">(arr</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null</span><span style="color:#A6ACCD;">))</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div></li><li><p>for循环嵌套，查找外层循环的子元素</p></li></ul></li></ul><h2 id="东方财富" tabindex="-1">东方财富 <a class="header-anchor" href="#东方财富" aria-hidden="true">#</a></h2><ul><li><p><strong>v-if、v-show和display:none</strong></p><ul><li><p>v-if：DOM节点直接消失，视觉上看不到，也没有位置，dom节点也不在</p><ul><li><p>v-show：调用display: none来控制元素是否展示</p></li><li><p>display：none：物理空间消失，但是dom还在（视觉上看不到了，也没有位置，但是dom还在）</p></li></ul></li><li><p>visibility: hidden：物理空间和dom都在，只是视觉上看不到了</p></li><li><p>v-if或者v-show之后，要给某个新展示的元素聚焦，需要将focus用nextTick包裹</p></li></ul></li><li><p>computed和watch</p><ul><li>computed是计算属性，依赖其他属性值，computed的值是有缓存的，只有它依赖的属性值发生改变，下一次获取computed的值时，才会重新计算computed的值。 --- 需要进行计算，并且依赖于其他数据时，使用computed，利用了computed缓存的特性，避免每次都重新计算</li><li>watch更多的是观察的作用，类似于某些数据的监听回调，每当监听的数据变化时，都会执行回调。 --- 需要在数据变化时执行异步或者开销较大的操作时，使用watch</li></ul></li><li><p>下标的方式修改数组</p><ul><li>通过下标的方式修改数组，不能实现响应式，可以使用<code>this.$set</code>、<code>splice方法</code></li></ul></li><li><p>vue生命周期：开始创建、初始化数据、编译模板、挂载DOM--&gt;渲染、更新--渲染、卸载等。</p><ul><li>beforeUpdate：（发生在虚拟DOM打补丁之前）当执行到这个钩子的时候，页面中显示的数据还是旧的，此时data中的数据是新的，只是页面还没有和最新的数据保持同步</li><li>beforeDestory：Vue进入到了销毁阶段，此时，实例身上的所有data、methods、过滤器、指令等，都处于可用的状态</li><li>destoryed：实例身上的所有data、methods、过滤器、指令等，都不可用的</li><li><img src="`+s+`" alt="1.png"></li><li>ssr中：beforeCreated和created之外的生命周期不能使用（服务端渲染和前端渲染的区别：服务端渲染没有实际的dom结构）</li></ul></li><li><p>v-for和v-if的优先级</p><p>vue2中：v-for的优先级比v-if的优先级高</p><p>vue3中：v-if的优先级比v-for的优先级高</p></li><li><p>Vue-router导航守卫</p><ul><li>全局导航守卫：任何路由跳转都会调用这个钩子函数 <ul><li>前置守卫：<code>beforeEach(to, from, next) =&gt; {}</code></li><li>解析守卫：<code>beforeResolve(to, from, next) =&gt; {}</code>，在<code>beforeRouteEnter</code>之后调用</li><li>后置守卫：<code>afterEach(to, from) =&gt; {}</code></li></ul></li><li>路由独享守卫：在路由对象内部的，进入该路由前被调用 <ul><li><code>beforeEnter(to, from, next) =&gt; {}</code>，在全局前置守卫后面调用，只在进入路由时触发</li></ul></li><li>组件导航守卫：定义在组件内部的 <ul><li>在该组件对应的路由被进入之前调用：<code>beforeRouteEnter(to, from, next) =&gt; {}</code>，在路由独享守卫后面调用，还不能获取到组件实例<code>this</code>，此时组件实例还没有创建</li><li>在该组件被复用的时候：<code>beforeRouteUpdate(to, from, next) =&gt; {}</code>。当前路由改变，但是组件被复用了。比如带有动态参数的路径<code>/foo/:id</code></li><li>在该组件对应的路由离开之前调用：<code>beforeRouteLeave(to, from, next) =&gt; {}</code>，此时还可以访问组件的实例this</li></ul></li><li>导航解析的流程： <ul><li>导航被触发</li><li>失活的组件内触发<code>beforeRouteLeave</code>钩子函数，离开当前组件</li><li>触发全局导航前置守卫<code>beforeEach</code></li><li>若组件复用触发组件守卫<code>beforeRouteUpdate</code></li><li>路由配置中的<code>beforeEnter</code></li><li>根据路由配置，解析、加载异步路由组件</li><li>在被激活的组件中调用<code>beforeRouteEnter</code></li><li>调用全局的解析守卫<code>beforeResolve</code></li><li>导航被确认</li><li>调用全局的后置守卫<code>afterEach</code></li></ul></li></ul></li><li><p>项目中用到的vue-router导航钩子</p><ul><li><code>beforeEach</code>：每一个路由切换都会触发这个钩子 <ul><li>1、改变浏览器标签页的名称：<code>document.title = getPageTitle(to.meta.title)</code>，getPageTitle中可以做一些非空判断的处理</li><li>2、根据token判断有没有登录，没有登录则跳转到登录页。跳转使用<code>next({ 路由 })</code></li><li>开始展示页面加载的进度条</li></ul></li><li><code>afterEach</code>：结束页面加载的进度条</li></ul></li><li><p>vue-router数据传递</p><ul><li><p>动态路由匹配：</p><ul><li><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> routes </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> [</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">path</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">/users/:id</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">component</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> User </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">users/12345</span><span style="color:#89DDFF;">\`</span><span style="color:#A6ACCD;">会匹配到这个路由</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">params</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">id</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">12345</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">$route</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">params</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">id访问到具体的值</span></span>
<span class="line"></span></code></pre></div></li></ul></li><li><p>编程式导航：</p><ul><li><p><code>path和query匹配</code>。<code>name和params匹配</code></p></li><li><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">$router</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">path</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">/dashboard</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">query</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">id</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">123</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div></li><li><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">$router</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Dashboard</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">params</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">id</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">7809</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div></li><li><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">$router</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">/dashboard</span><span style="color:#89DDFF;">\`</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div></li></ul></li></ul></li><li><p>vue-router路由对象：</p><ul><li>fullpath</li><li>hash</li><li>matched：是一个数组，数组第一项是本身或者父级</li><li>name</li><li>params</li><li>query</li><li>path</li></ul></li><li><p>vue-router滚动行为：使用前端路由，当切换到新路由时，想要页面滚动到顶部，或者保持原先的滚动位置，vue-router可以自定义路由切换时页面如何滚动。</p><ul><li><p>创建router实例时，可以提供一个scrollBehavior方法</p></li><li><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> router </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Router</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">routes</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> []</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">scrollBehavior</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">to</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">from</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">savedPosition</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// return 期望滚动到哪个位置</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">savedPosition</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">            </span><span style="color:#676E95;font-style:italic;">// 返回savedPosition，在按下浏览器的后退、前进、按钮时，就会像浏览器的原生表现那样</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">savedPosition</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        	</span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> x</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> y</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div></li><li><p>返回值的数据结构，返回空对象则不会发生滚动。behavior: &#39;smooth&#39; 平滑滚动</p></li><li><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">x</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">number</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">y</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">number</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">selector</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">string</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">offset</span><span style="color:#89DDFF;">?:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> x</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">number</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> y</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">number</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">},</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">behavior</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">smooth</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div></li><li><p>模拟滚动到锚点的行为</p></li><li><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">scrollBehavior</span><span style="color:#A6ACCD;">(to</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> from</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> savedPosition) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">to</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">hash</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            selector</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">to</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">hash</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div></li></ul></li></ul><h2 id="见知数据" tabindex="-1">见知数据 <a class="header-anchor" href="#见知数据" aria-hidden="true">#</a></h2><ul><li><p>webpack的sourcemap</p><ul><li>编译后的源文件映射，在devtool选项配置</li><li>打包之后，开发环境中源代码经过压缩、去空格、babel编译转化，处理之后的代码和源代码之间差异性很大，会造成无法debug的问题</li><li>构建了处理前和处理后的代码之间的桥梁，方便开发人员定位问题</li></ul></li><li><p>git rebase 和 git merge：都可以将一个分支的修改合并到另一个分支。</p><ul><li>merge：安全的操作，现有的分支不会被更改。会引入一个外来的合并提交，可能会污染分支的历史</li><li>rebase：将另一个分支上面的新的提交并入过来，是为原分支上面的每一个提交创建了一个新的提交，重写了项目历史，并且不会带来合并提交，但是合并完了之后，你并不清楚哪些提交是被合并过来的。</li></ul></li><li><p>keep-alive：Vue内置的一个组件，可以使被包含组件保留状态，避免重新渲染</p><ul><li><p>一般是结合路由和动态组件一起使用，用于缓存组件</p><ul><li><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">&lt;!--缓存动态组件--&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">keep-alive</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">component</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">is</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">componentName</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">component</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">keep-alive</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div></li><li><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">&lt;!--缓存路由组件：大多数的使用场景--&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">keep-alive</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">router-view</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">router-view</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">keep-alive</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div></li></ul></li><li><p>提供了include、exclude属性，两者都支持字符串或正则表达式或数组，include表示只有名称匹配的组件会被缓存，exclude表示任何匹配名称的组件都不会被缓存，exclude的优先级比include高。<strong>会首先匹配组件的name选项，name不可用时匹配局部注册名（父组件的components选项的值）</strong></p></li><li><p>有两个对应的生命周期函数，被激活时-activated，组件被移除时-deactivated</p><ul><li>activated：在组件第一次被渲染的时候就会调用，之后每次在组件激活时也会被调用，一般在mounted之后，beforeRouteEnter之前。组件被缓存了，再次进入组件时，不会触发前四个钩子函数</li><li>deactivated：组件被停用（离开路由）时调用。组件也没有销毁阶段的生命周期钩子，这个可以替代beforeDestory</li></ul></li><li><p>它自身不会渲染一个DOM元素，也不会出现在父组件链中</p></li><li><p>使用了keep-alive之后，就不会调用<code>beforeDestory</code>，<code>destoryed</code>钩子</p></li><li><p>用了keep-alive包裹的组件，想再刷新页面，这么做？？？</p></li></ul></li><li><p>keep-alive的原理：</p><ul><li>在keep-alive组件的created：初始化一个cache数组，keys数组，前者用来缓存组件的虚拟dom集合，后者用来缓存组件的key集合</li><li>在keep-alive组件的mounted：实时监听include，exclude这两个的变化，并执行响应的操作</li><li>在keep-alive组件的destoryed：删除掉所有缓存相关的东西</li></ul></li><li><p>BFC：块级格式上下文，它是一个独立容器，决定了元素如何定位、与其他元素之间的关系和相互作用。</p><ul><li>特点： <ul><li>BFC内部的元素和外部的元素不会互相影响</li><li>内部的盒子在垂直方向上从上到下排列，盒子垂直方向上的间距由margin决定</li><li>同一个BFC中的盒子依然会margin重叠，不同的BFC则不会 <ul><li>根元素body就是一个BFC，如果没有其他的BFC的情况下就会发生margin重叠，但是如果在重叠元素上触发一个BFC，那他和body就是两个不同的BFC，则不会再发生margin重叠</li></ul></li><li>计算BFC的高度时，浮动元素的高度也参与计算</li></ul></li><li>如何触发BFC： <ul><li>float不为none</li><li>overflow不为none</li><li>display的值为inline-block，table-cell，flex，table</li><li>position的值为absolute、fixed</li></ul></li></ul></li><li><p>如何隐藏一个元素</p><ul><li>display: none，被隐藏的元素，物理位置不在了，会导致页面的重排和重绘，元素消失后，自身绑定的事件不会触发</li><li>visibility: hidden，被隐藏的元素还是保持原来的位置，但是无法绑定事件，会发生重绘</li><li>opacity: 0，页面上还会保留完整透明的元素，并且还可以绑定事件，会发生重绘</li><li>设置width，height为0，若有子元素还要设置overflow:hidden</li><li>position: absolute，将元素移出页面，top和left给一个很大的值</li></ul></li><li><p>重排和重绘</p><ul><li>如何避免重排和重绘 <ul><li>避免多次操作DOM，合并在一起去操作</li><li>避免使用table布局，一个小修改，可能引起整个table的修改</li></ul></li></ul></li><li><p>遍历数组的方式的区别：for循环、foreach、for...in、for...of</p><ul><li>for...in：遍历得到的是key，遍历对象的，不可遍历Map、Set、Generator。<strong>用于可枚举（enumerable: true）的数据，如对象、数组、字符串</strong>，还会遍历到原型上的key</li><li>for...of：遍历得到的是value，遍历数组、Map、Set、Generator。<strong>用于可迭代（[symbol.iterator]）的数据，如数组、字符串、Map、Set</strong>，可以配合continue、break、return使用</li></ul></li><li><p>for...in可以遍历set和map吗</p><ul><li>不可以。for...in用于遍历可枚举的变量类型，set和map不是可枚举的</li></ul></li></ul>`,11),t=[e];function c(r,i,y,D,F,C){return a(),n("div",null,t)}const h=l(o,[["render",c]]);export{u as __pageData,h as default};
